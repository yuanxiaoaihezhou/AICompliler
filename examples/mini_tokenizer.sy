// Simplified tokenizer demonstrating self-hosting capabilities
// This shows how the enhanced features enable writing compiler components

// Token types
const int TOKEN_NUMBER = 1;
const int TOKEN_PLUS = 2;
const int TOKEN_MINUS = 3;
const int TOKEN_EOF = 4;

// Simple tokenizer for expressions like "123 + 456"
int tokenize_char(char c) {
    if (c == '+') {
        return TOKEN_PLUS;
    }
    if (c == '-') {
        return TOKEN_MINUS;
    }
    if (c == '0') {
        return TOKEN_NUMBER;
    }
    return TOKEN_EOF;
}

// Check if character is a digit
int is_digit(char c) {
    if (c >= '0') {
        if (c <= '9') {
            return 1;
        }
    }
    return 0;
}

// Convert character to integer value
int char_to_int(char c) {
    return c - '0';
}

// Main function demonstrating the tokenizer
int main() {
    char c;
    int token_type;
    int value;
    
    // Test character
    c = '+';
    token_type = tokenize_char(c);
    
    // Test digit checking
    c = '5';
    if (is_digit(c)) {
        value = char_to_int(c);  // value = 5
    }
    
    // Test another character
    c = '9';
    if (is_digit(c)) {
        value = char_to_int(c);  // value = 9
    }
    
    return value;
}
